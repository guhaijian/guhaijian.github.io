<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>顾海健的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guhaijian.github.io/"/>
  <updated>2020-07-26T08:23:49.383Z</updated>
  <id>http://guhaijian.github.io/</id>
  
  <author>
    <name>guhaijian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>事件绑定和事件委托</title>
    <link href="http://guhaijian.github.io/2020/07/26/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>http://guhaijian.github.io/2020/07/26/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</id>
    <published>2020-07-26T08:15:57.087Z</published>
    <updated>2020-07-26T08:23:49.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="js事件绑定和事件委托"><a href="#js事件绑定和事件委托" class="headerlink" title="js事件绑定和事件委托"></a>js事件绑定和事件委托</h1><h2 id="js中三种事件绑定"><a href="#js中三种事件绑定" class="headerlink" title="js中三种事件绑定"></a>js中三种事件绑定</h2><h3 id="1-在dom元素中直接绑定"><a href="#1-在dom元素中直接绑定" class="headerlink" title="1.在dom元素中直接绑定"></a>1.在dom元素中直接绑定</h3><blockquote><p>在DOM元素中如果绑定两个事件，只会执行第一个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; onclick&#x3D;&quot;hello()&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-通过js代码绑定"><a href="#2-通过js代码绑定" class="headerlink" title="2.通过js代码绑定"></a>2.通过js代码绑定</h3><blockquote><p>通过匿名函数方式绑定的事件只会执行最后绑定的那个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&quot;btn&quot;).onclick &#x3D; function()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-绑定事件监听函数"><a href="#3-绑定事件监听函数" class="headerlink" title="3.绑定事件监听函数"></a>3.绑定事件监听函数</h3><blockquote><p>事件监听：为同一个对象的同一个事件绑定多个事件处理程序</p></blockquote><ul><li>W3C规范：addEventListener（）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--element.addEventListener(event, function, useCapture)--&gt;</span><br><span class="line">&lt;!--event:（必需）事件名，支持所有 DOM事件 --&gt;</span><br><span class="line">&lt;!--function：（必需）指定要事件触发时执行的函数--&gt;</span><br><span class="line">&lt;!--useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。--&gt;</span><br><span class="line">&lt;!--removeEventListener（event, function）：移除事件监听--&gt;</span><br><span class="line">&lt;!--注：IE8以下不支持--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;,hello);</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>IE8之前的方法：attachEvent（）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--element.attachEvent(event, function)--&gt;</span><br><span class="line">&lt;!--event：（必需）事件类型。需加“on“，例如：onclick。--&gt;</span><br><span class="line">&lt;!--function：（必需）指定要事件触发时执行的函数。--&gt;</span><br><span class="line">&lt;!--detachEvent：取消事件监听--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;btn&quot;).attachEvent(&quot;onclick&quot;,hello);</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><blockquote><ol><li>事件委托就是利用冒泡的原理，将事件添加到父元素或者祖先元素身上，去触发执行效果。</li><li>事件绑定无法对动态创建的元素添加事件，事件委托可以给动态创建的元素添加事件。</li><li>每一次访问dom元素都会引起浏览器重绘和重排，次数多了就会影响性能，所以在处理大量的事件时，事件委托比事件绑定效率高</li><li>每一个绑定事件的元素都要绑定一个函数，每个函数都是一个对象，对象会占用很多内存，内存中的对象越多，性能就越差。事件委托只给父元素或者祖先元素添加事件，所以总体上比较节约内存</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://guhaijian.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用async和axios发送axios请求</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E5%88%A9%E7%94%A8async%E5%92%8Cawite%E5%8F%91%E9%80%81axios%E8%AF%B7%E6%B1%82/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E5%88%A9%E7%94%A8async%E5%92%8Cawite%E5%8F%91%E9%80%81axios%E8%AF%B7%E6%B1%82/</id>
    <published>2020-07-26T08:15:57.076Z</published>
    <updated>2020-07-26T08:23:00.660Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用async和awite发送axios请求"><a href="#利用async和awite发送axios请求" class="headerlink" title="利用async和awite发送axios请求"></a>利用async和awite发送axios请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function axios(obj) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            const xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">            xhr.open(obj.method, obj.url)</span><br><span class="line">            xhr.send(null)</span><br><span class="line">            xhr.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">                if (xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">                    if (xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    resolve(JSON.parse(xhr.responseText))</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        reject(xhr.responseText)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    async function fn() &#123;</span><br><span class="line">        const res &#x3D; await axios(&#123;</span><br><span class="line">            method: &#39;get&#39;,</span><br><span class="line">            url: &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;todos&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">            console.log(res)</span><br><span class="line">        const res2 &#x3D; await axios(&#123;</span><br><span class="line">            method: &#39;get&#39;,</span><br><span class="line">            url: &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;todos&#x2F;1&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">            console.log(res2)</span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>事件循环队列</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-07-26T08:15:57.072Z</published>
    <updated>2020-07-26T08:25:22.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="事件循环队列"><a href="#事件循环队列" class="headerlink" title="事件循环队列"></a>事件循环队列</h1><h3 id="线程概念："><a href="#线程概念：" class="headerlink" title="线程概念："></a>线程概念：</h3><ul><li>==浏览器是多线程的==，其包含的线程有GUI渲染线程（负责渲染页面，解析HTML、CSS构成DOM树、JS引擎、事件触发线程、定时器触发线程、HTTP请求线程等主要线程）</li><li>==JS引擎是单线程的==，可以把这个线程称之为==JS主线程==</li><li>我们把JS中处理异步文件读取、AJAX请求等==异步事件==执行的线程称之为==幕后线程==或者工作线程，一般认为该线程在浏览器的JS引擎中，但与主线程分开</li></ul><h3 id="任务队列："><a href="#任务队列：" class="headerlink" title="任务队列："></a>任务队列：</h3><ul><li>==同步任务==：是==主线程==上排队执行的任务，只有前一个任务执行完毕才会去执行后一个任务</li><li>==异步任务==：是进入到==任务队列==中的任务，==只有任务队列通知主线程某个异步任务可以执行了，该任务才会进入主线程==</li></ul><h3 id="任务队列中的宏任务和微任务："><a href="#任务队列中的宏任务和微任务：" class="headerlink" title="任务队列中的宏任务和微任务："></a>任务队列中的宏任务和微任务：</h3><ul><li>==宏任务==：==script== ( 整体代码 )、==setTimeout==、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</li><li>==微任务==：==Promise==、MutaionObserver（H5新特性，当DOM树发生变动时，会等所有DOM操作完后一次性触发，这是一个异步任务）、process.nextTick ( Node.js 环境 )</li></ul><h3 id="流程图解"><a href="#流程图解" class="headerlink" title="流程图解"></a>流程图解</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/images/%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.jpg" alt=""></p><h3 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">console.log(0)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 - 宏任务2--&gt;</span><br><span class="line">        console.log(1)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">    &lt;!--将外层的promise对象的状态, 改成fulfilled成功, 将来.then可以执行 p1--&gt;</span><br><span class="line">    resolve(&#39;p1&#39;)</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 --- 宏任务3--&gt;</span><br><span class="line">        &lt;!--promise的状态只能被修改一次, 一旦被修改, 就会状态凝固--&gt;</span><br><span class="line">            resolve(&#39;setTimeout2&#39;)</span><br><span class="line">            console.log(4)</span><br><span class="line">         &#125;, 0)</span><br><span class="line">    &lt;!--将内层的promise对象的状态, 改成fulfilled成功, 将来.then p2--&gt;</span><br><span class="line">    resolve(&#39;p2&#39;)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">    &lt;!--排队 --- 微任务1--&gt;</span><br><span class="line">        console.log(data) </span><br><span class="line">    &#125;)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 ---- 宏任务4--&gt;</span><br><span class="line">          resolve(&#39;setTimeout1&#39;)</span><br><span class="line">          console.log(5)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">    &lt;!--微任务2--&gt;</span><br><span class="line">        console.log(data)  </span><br><span class="line">    &#125;)</span><br><span class="line">        console.log(6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE生命周期</title>
    <link href="http://guhaijian.github.io/2020/07/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://guhaijian.github.io/2020/07/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-07-26T08:15:57.068Z</published>
    <updated>2020-07-26T08:23:29.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="VUE生命周期"><a href="#VUE生命周期" class="headerlink" title="VUE生命周期"></a>VUE生命周期</h1><h1 id="生命周期图解"><a href="#生命周期图解" class="headerlink" title="生命周期图解"></a>生命周期图解</h1><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/images/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E8%A7%A3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>双向数据绑定</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2020-07-26T08:15:57.066Z</published>
    <updated>2020-07-26T08:26:16.769Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="VUE双向数据绑定"><a href="#VUE双向数据绑定" class="headerlink" title="VUE双向数据绑定"></a>VUE双向数据绑定</h1><blockquote><p>所谓双向数据绑定就是视图元素变化会引发view=&gt;model中对应的数据改变，反过来model=&gt;view中数据发生变化也会引起视图更新</p></blockquote><h3 id="1-从view到model"><a href="#1-从view到model" class="headerlink" title="1. 从view到model:"></a>1. 从view到model:</h3><ul><li>采用dom事件绑定实现</li></ul><h3 id="2-从model到view"><a href="#2-从model到view" class="headerlink" title="2. 从model到view:"></a>2. 从model到view:</h3><ul><li>angular脏数据检查：通过脏值检测（定时器轮询）的方式比对数据是否有变更来决定是否更新视图，能兼容ie8但性能比较低</li><li>vue2.0中运用到了ES5中Object.defineProperty（obj, prop, descriptor）数据劫持的方式</li><li>vue3.0中运用到了ES6中Proxy（target, handler）数据代理的方式</li></ul><h4 id="1-Object-defineProperty（obj-prop-descriptor）数据劫持"><a href="#1-Object-defineProperty（obj-prop-descriptor）数据劫持" class="headerlink" title="1. Object.defineProperty（obj, prop, descriptor）数据劫持"></a>1. Object.defineProperty（obj, prop, descriptor）数据劫持</h4><blockquote><ol><li>obj: 要定义属性的对象</li><li>prop: 要定义或修改的属性的名称或 Symbol </li><li>descriptor: 要定义或修改的属性描述符</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type &#x3D; &#39;text&#39;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--view &#x3D;&gt; model--&gt;</span><br><span class="line">    </span><br><span class="line">    const input &#x3D; document.querySelector（&#39;input&#39;）</span><br><span class="line">    input.addEventListener（&#39;input&#39;，function（）&#123;</span><br><span class="line">        data.msg &#x3D; this.value</span><br><span class="line">    &#125;）</span><br><span class="line">    const data &#x3D; &#123;</span><br><span class="line">        msg: &#39;hello&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--model &#x3D;&gt; view--&gt;</span><br><span class="line">    </span><br><span class="line">    let temp &#x3D; data.msg</span><br><span class="line">    input.value &#x3D; msg</span><br><span class="line">    &lt;!--data--数据对象；&#39;msg&#39;--劫持的属性名--&gt;</span><br><span class="line">    &lt;!--get（）：读取劫持属性时触发，get中要有返回值--&gt;</span><br><span class="line">    &lt;!--set（）：设置劫持的属性值时触发--&gt;</span><br><span class="line">    Object.defineProperty（data, &#39;msg&#39;, &#123;</span><br><span class="line">        get（）&#123;</span><br><span class="line">            return msg</span><br><span class="line">        &#125;，</span><br><span class="line">        set（value）&#123;</span><br><span class="line">            msg &#x3D; value</span><br><span class="line">            input.value &#x3D; value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="Object-defineProperty（）数据劫持的缺点："><a href="#Object-defineProperty（）数据劫持的缺点：" class="headerlink" title="Object.defineProperty（）数据劫持的缺点："></a>Object.defineProperty（）数据劫持的缺点：</h6><ul><li>无法监控数组下标的变化，需要通过push（）、shift（）等方法来实现数组变动</li><li>只能劫持对象的属性，需要对每个对象的每个属性进行遍历来实现对数据的监控</li><li>并且需要通过递归和遍历data对象来实现深度遍历，如果属性值也是对象也需要深度遍历</li></ul><h4 id="Proxy（target-handler）数据代理"><a href="#Proxy（target-handler）数据代理" class="headerlink" title="Proxy（target, handler）数据代理"></a>Proxy（target, handler）数据代理</h4><blockquote><ol><li>target: 需要使用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li>handler:  一个对象，其属性是当执行一个操作时定义代理的行为的函数（可以理解为某种触发器） </li><li>可以监听（劫持）多个属性，而且可以监听（劫持）到新添加的属性</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&#39;text&#39;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--view &#x3D;&gt; model--&gt;</span><br><span class="line">    </span><br><span class="line">    const input &#x3D; document.querySelector（&#39;input&#39;）</span><br><span class="line">    input.addEventListener（&#39;input&#39;, function（）&#123;</span><br><span class="line">        obj.msg &#x3D; this.value</span><br><span class="line">    &#125;)</span><br><span class="line">    const data &#x3D; &#123;</span><br><span class="line">        msg: &#39;hello&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--model &#x3D;&gt; view--&gt;</span><br><span class="line">    </span><br><span class="line">    input.value &#x3D; data.msg</span><br><span class="line">    const obj &#x3D; new proxy（data, &#123;</span><br><span class="line">        get（target, key）&#123;</span><br><span class="line">            return target[key]</span><br><span class="line">        &#125;，</span><br><span class="line">        set（target, key, value）&#123;</span><br><span class="line">            target[key] &#x3D; value</span><br><span class="line">            input.value &#x3D; value</span><br><span class="line">        &#125;，</span><br><span class="line">    &#125;）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>MVC、MVP、MVVM架构模式</title>
    <link href="http://guhaijian.github.io/2020/07/23/MVC%E3%80%81MVP%E3%80%81MVVM%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://guhaijian.github.io/2020/07/23/MVC%E3%80%81MVP%E3%80%81MVVM%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-23T03:41:23.660Z</published>
    <updated>2020-07-26T08:23:40.303Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MVC、MVP、MVVM架构模式"><a href="#MVC、MVP、MVVM架构模式" class="headerlink" title="MVC、MVP、MVVM架构模式"></a>MVC、MVP、MVVM架构模式</h1><blockquote><p>发展历程：MVC =&gt; MVP =&gt; MVVM</p></blockquote><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><ul><li>View: 用户界面</li><li>Controller: 业务逻辑</li><li>Model: 数据保存</li></ul><blockquote><p>主要逻辑：View触发事件，Controller响应并处理逻辑，调用Model，Model处理完成后将数据发送给View,View更新</p></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVC%E6%A8%A1%E5%BC%8F.jpg" alt=""></p><h3 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h3><blockquote><ol><li>MVP模式中将Controller改名为presenter,同时改变通信方向</li><li>MVP模式中View和Model不发生联系，以Presenter为核心，负责从Model获取数据，并填充到View中，因此View被也被称为“被动视图”，暴露出setter接口</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVP%E6%A8%A1%E5%BC%8F.jpg" alt=""></p><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><blockquote><ol><li>MVVM模型中，VM为ViewModel，同样是以VM为核心，但是不同于MVP，MVVM采用了数据双向绑定的方案，替代了繁琐复杂的DOM操作</li><li>该模型中，View与VM保持同步，View绑定到VM的属性上，如果VM数据发生变化，通过数据绑定的方式，View会自动更新视图；VM同样也暴露出Model中的数据</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVVM%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
