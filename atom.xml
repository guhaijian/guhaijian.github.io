<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>顾海健的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guhaijian.github.io/"/>
  <updated>2020-09-12T12:44:15.153Z</updated>
  <id>http://guhaijian.github.io/</id>
  
  <author>
    <name>guhaijian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4. 从零开始新闻头条(Profile个人中心)</title>
    <link href="http://guhaijian.github.io/2020/09/12/4.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Profile%E4%B8%AA%E4%BA%BA%E4%B8%AD%E5%BF%83)/"/>
    <id>http://guhaijian.github.io/2020/09/12/4.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Profile%E4%B8%AA%E4%BA%BA%E4%B8%AD%E5%BF%83)/</id>
    <published>2020-09-12T12:44:30.595Z</published>
    <updated>2020-09-12T12:44:15.153Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从零开始新闻头条-Profile-个人中心"><a href="#从零开始新闻头条-Profile-个人中心" class="headerlink" title="从零开始新闻头条(Profile 个人中心)"></a>从零开始新闻头条(Profile 个人中心)</h1><h3 id="1-准备-Profile-个人中心基础样式和模板"><a href="#1-准备-Profile-个人中心基础样式和模板" class="headerlink" title="1. 准备 Profile 个人中心基础样式和模板"></a>1. 准备 Profile 个人中心基础样式和模板</h3><h4 id="template-模板"><a href="#template-模板" class="headerlink" title="template 模板"></a>template 模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;profile&quot;&gt;</span><br><span class="line">    &lt;!-- 头部信息 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;user-info&quot;&gt;</span><br><span class="line">      &lt;!-- 头像 --&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;avatar&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;~assets&#x2F;狗哥.jpg&quot; alt &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- 信息 --&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;info&quot;&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;name&quot;&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;iconfont iconxingbienan&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">          &lt;span&gt;狗哥&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;time&quot;&gt;2020-10-10&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- 右箭头 --&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;iconfont iconjiantou1&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 下面信息 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">      &lt;hm-nav&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="style-样式"><a href="#style-样式" class="headerlink" title="style 样式"></a>style 样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.profile &#123;</span><br><span class="line">  .user-info &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border-bottom: 3px solid #ccc;</span><br><span class="line">    .avatar &#123;</span><br><span class="line">      width: 70px;</span><br><span class="line">      height: 70px;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .info &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      p &#123;</span><br><span class="line">        height: 25px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">      &#125;</span><br><span class="line">      .name &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #000;</span><br><span class="line">        i &#123;</span><br><span class="line">          color: #7bbcec;</span><br><span class="line">          margin-right: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .time &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #999;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .icon &#123;</span><br><span class="line">      width: 30px;</span><br><span class="line">      height: 70px;</span><br><span class="line">      line-height: 70px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="2-封装全局-hm-nav-组件"><a href="#2-封装全局-hm-nav-组件" class="headerlink" title="2. 封装全局 hm-nav 组件"></a>2. 封装全局 hm-nav 组件</h3><h4 id="封装-hm-nav-导航栏"><a href="#封装-hm-nav-导航栏" class="headerlink" title="封装 hm-nav 导航栏"></a>封装 hm-nav 导航栏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-nav&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;我的关注&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;center&quot;&gt;关注用户&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconjiantou1&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.hm-nav &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  height: 50px;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">  .left &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">  .center &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: right;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: #666;</span><br><span class="line">  &#125;</span><br><span class="line">  .right &#123;</span><br><span class="line">    padding: 0 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h4 id="在-main-js-中将-hm-nav-注册成全局组件"><a href="#在-main-js-中将-hm-nav-注册成全局组件" class="headerlink" title="在 main.js 中将 hm-nav 注册成全局组件"></a>在 main.js 中将 hm-nav 注册成全局组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import HmNav from &#39;commponents&#x2F;hm-nav.vue&#39;</span><br><span class="line">Vue.component(&#39;HmNav&#39;,HmNav)</span><br></pre></td></tr></table></figure><h4 id="在-Profile-个人中心中使用全局组件-hm-nav"><a href="#在-Profile-个人中心中使用全局组件-hm-nav" class="headerlink" title="在 Profile 个人中心中使用全局组件 hm-nav"></a>在 Profile 个人中心中使用全局组件 hm-nav</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">  &lt;hm-nav name&#x3D;&quot;我的关注&quot; desc&#x3D;&quot;关注的用户&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">  &lt;hm-nav name&#x3D;&quot;我的跟帖&quot; desc&#x3D;&quot;跟帖&#x2F;回复&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">  &lt;hm-nav name&#x3D;&quot;我的收藏&quot; desc&#x3D;&quot;文章&#x2F;视频&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">  &lt;hm-nav name&#x3D;&quot;栏目管理&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">  &lt;hm-nav name&#x3D;&quot;设置&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h4 id="在-hm-nav-组件中通过-props-接收参数-并渲染到页面中"><a href="#在-hm-nav-组件中通过-props-接收参数-并渲染到页面中" class="headerlink" title="在 hm-nav 组件中通过 props 接收参数,并渲染到页面中"></a>在 hm-nav 组件中通过 props 接收参数,并渲染到页面中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-nav&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;center&quot;&gt;&#123;&#123; desc &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconjiantou1&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">props:&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#39;&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    desc:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        default:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-登录状态保持"><a href="#3-登录状态保持" class="headerlink" title="==3. 登录状态保持=="></a>==3. 登录状态保持==</h3><blockquote><p>cookie+session 实现登录状态保持</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 服务器登录的时候,分配一个session用于存储数据,同时将sessionID返回给浏览器</span><br><span class="line">2. 浏览器通过cookie把sessionID存储起来,下次访问带上</span><br><span class="line">3. 服务器端可以通过sessionID来确定用户是否登录</span><br><span class="line">缺点:</span><br><span class="line">1. 访问量大,服务器需要集群,消耗内存和性能</span><br><span class="line">2. 手机端浏览器很多不支持cookie或者禁用cookie</span><br></pre></td></tr></table></figure><blockquote><p>tooken 令牌实现登录状态保持</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优势:</span><br><span class="line">1. token无状态,服务器不用存储token,服务器只需要签发和校验token即可</span><br><span class="line">2. token无状态,集群的时候,算法一致,无论访问哪台服务器都是一样的</span><br><span class="line">3. 解析token效率比查询数据库高的多</span><br><span class="line">4. 只要服务器端算法一致,token就可以跨站点登录,cookie受到了同源策略限制,无法跨域(web存储)</span><br><span class="line">5. 在移动端开发中,使用cookie非常麻烦,一般都用token验证</span><br><span class="line">使用:</span><br><span class="line">1. 客户端收到服务器返回的JWT(token),可以存储在Cookie里面,也可以存储在localStroage</span><br><span class="line">2. 之后客户端每次跟服务器端通信,都要带上这个JWT(token)。你可以把它放在Cookie里面自动发送,但是这样不能跨域,所以更好的办法是放在HTTP请求头Authorization字段里面</span><br></pre></td></tr></table></figure><h4 id="在-Login-页中登陆成功时保存-token-用户状态"><a href="#在-Login-页中登陆成功时保存-token-用户状态" class="headerlink" title="在 Login 页中登陆成功时保存 token 用户状态"></a>在 Login 页中登陆成功时保存 token 用户状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const &#123; statusCode, message, data &#125; &#x3D; res.data</span><br><span class="line">if (statusCode &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">  &#x2F;&#x2F; 先存token, 再跳转</span><br><span class="line">  const &#123; token, user &#125; &#x3D; data</span><br><span class="line">  localStorage.setItem(&#39;token&#39;, token)</span><br><span class="line">  localStorage.setItem(&#39;user_id&#39;, user.id)</span><br><span class="line"></span><br><span class="line">  this.$toast.success(message)</span><br><span class="line">  this.$router.push(&#39;&#x2F;profile&#39;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  this.$toast.fail(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送请求携带参数的两种方法"><a href="#发送请求携带参数的两种方法" class="headerlink" title="发送请求携带参数的两种方法"></a>发送请求携带参数的两种方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. this.$axios.get(url,config)</span><br><span class="line">&#x2F;&#x2F;config配置对象中配置请求头</span><br><span class="line">2. this.$axios.post(url,data,config)</span><br><span class="line">&#x2F;&#x2F;config配置对象中配置请求头</span><br></pre></td></tr></table></figure><h3 id="4-Profile-个人中心页中一进入页面携带好-token-向服务器发送请求获取数据"><a href="#4-Profile-个人中心页中一进入页面携带好-token-向服务器发送请求获取数据" class="headerlink" title="==4. Profile 个人中心页中一进入页面携带好 token 向服务器发送请求获取数据=="></a>==4. Profile 个人中心页中一进入页面携带好 token 向服务器发送请求获取数据==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">async created()&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取token</span><br><span class="line">    const id &#x3D; localStroage.getItem(&#39;user_id&#39;)</span><br><span class="line">    const token &#x3D; localStroage.getItem(&#39;token&#39;)</span><br><span class="line">    &#x2F;&#x2F;发送ajax请求,在请求头中携带参数</span><br><span class="line">    const res &#x3D; await this.$axios.get(&#96;&#x2F;user&#x2F;$&#123;id&#125;&#96;,&#123;</span><br><span class="line">        header: &#123;</span><br><span class="line">            Authorization: token</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F;结构res.data,把获取到的值赋值给data中定义的profile</span><br><span class="line">    const &#123;statusCode,data&#125; &#x3D; res.data</span><br><span class="line">    if(statysCode&#x3D;&#x3D;&#x3D;200)&#123;</span><br><span class="line">        this.propfile &#x3D; data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">data ()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        profile:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-main-js-中添加请求拦截器携带-token"><a href="#在-main-js-中添加请求拦截器携带-token" class="headerlink" title="==在 main.js 中添加请求拦截器携带 token=="></a>==在 main.js 中添加请求拦截器携带 token==</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(</span><br><span class="line">  function(config) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在发送请求之前, 判断本地有没有token令牌, 只要有token令牌, 一律请求时携带在请求头中</span><br><span class="line">    const token &#x3D; localStorage.getItem(&#39;token&#39;)</span><br><span class="line">    if (token) &#123;</span><br><span class="line">      config.headers.Authorization &#x3D; token</span><br><span class="line">    &#125;</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  function(error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="5-获取到数据后在-Profile-中渲染数据"><a href="#5-获取到数据后在-Profile-中渲染数据" class="headerlink" title="5. 获取到数据后在 Profile 中渲染数据"></a>5. 获取到数据后在 Profile 中渲染数据</h3><h4 id="通过计算属性拼接图片地址进行渲染"><a href="#通过计算属性拼接图片地址进行渲染" class="headerlink" title="==通过计算属性拼接图片地址进行渲染=="></a>==通过计算属性拼接图片地址进行渲染==</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;avatar&quot;&gt;</span><br><span class="line">  &lt;img :src&#x3D;&quot;imgSrc&quot; alt &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">computed:&#123;</span><br><span class="line">    imgSrc()&#123;</span><br><span class="line">        return this.$axios.defaults.baseURL + this.profile.head_img</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;拼接上基地址需要先在main.js中配置axios基础地址,只有配置了基础地址,将来axios的请求都会自动拼接上这个基准路径</span><br><span class="line">&#x2F;&#x2F;axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br></pre></td></tr></table></figure><h4 id="使用时间过滤器渲染时间"><a href="#使用时间过滤器渲染时间" class="headerlink" title="==使用时间过滤器渲染时间=="></a>==使用时间过滤器渲染时间==</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 安装moment插件</span><br><span class="line">yarn add moment</span><br><span class="line">2. 在main.js中定义全局过滤器,value就是需要操作字符串,&#123;&#123; msg | time &#125;&#125; &#x3D;&gt; msg 的值,就是这边的value</span><br><span class="line">import moment from &#39;moment&#39;</span><br><span class="line">Vue.filter(&#39;time&#39;,function(value)&#123;</span><br><span class="line">    return ,moment(value).format(&#39;YYYY-MM-DD&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">3. 使用过滤器</span><br><span class="line">&lt;p class&#x3D;&quot;time&quot;&gt; &#123;&#123; profile.create_date | time &#125;&#125; &lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h4 id="性别的显示处理"><a href="#性别的显示处理" class="headerlink" title="性别的显示处理"></a>性别的显示处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;name&quot;&gt;</span><br><span class="line">  &lt;i v-if&#x3D;&quot;profile.gender &#x3D;&#x3D;&#x3D; 1&quot; class&#x3D;&quot;iconfont iconxingbienan&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;i v-else class&#x3D;&quot;iconfont iconxingbienv&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123; profile.nickname &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">  &#x2F;&#x2F;样式</span><br><span class="line">  .name &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    color: #333;</span><br><span class="line">    .iconxingbienan &#123;</span><br><span class="line">      color: skyblue;</span><br><span class="line">      margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .iconxingbienv &#123;</span><br><span class="line">      color: hotpink;</span><br><span class="line">      margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="6-通过导航守卫拦截未登陆用户"><a href="#6-通过导航守卫拦截未登陆用户" class="headerlink" title="==6. 通过导航守卫拦截未登陆用户=="></a>==6. 通过导航守卫拦截未登陆用户==</h3><h4 id="在-index-js-中配置全局前置守卫-所有的路由在被真正访问匹配之前-都会先经过全局前置守卫"><a href="#在-index-js-中配置全局前置守卫-所有的路由在被真正访问匹配之前-都会先经过全局前置守卫" class="headerlink" title="在 index.js 中配置全局前置守卫,所有的路由在被真正访问匹配之前,都会先经过全局前置守卫"></a>在 index.js 中配置全局前置守卫,所有的路由在被真正访问匹配之前,都会先经过全局前置守卫</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将所有需要授权的页面的路径,存到一个授权数组中去</span><br><span class="line">const AuthUrls &#x3D; [&#39;&#x2F;profile&#39;]</span><br><span class="line">router.beforeEach((to,from,next)&#x3D;&gt;&#123;</span><br><span class="line">    if(AuthUrls.includes(to.path))&#123;</span><br><span class="line">    &#x2F;&#x2F;判断需要登录的页面,可以判断是否有token</span><br><span class="line">        const token &#x3D; localStorage.getItem(&#39;token&#39;)</span><br><span class="line">        if(token)&#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            next(&#39;&#x2F;login&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">    &#x2F;&#x2F;不需要登录的直接放行</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-导航守卫放行过用户-token-也可能会失效-需要在-main-js-中通过响应拦截器对失效的-token-进行处理"><a href="#7-导航守卫放行过用户-token-也可能会失效-需要在-main-js-中通过响应拦截器对失效的-token-进行处理" class="headerlink" title="==7. 导航守卫放行过用户 token 也可能会失效,需要在 main.js 中通过响应拦截器对失效的 token 进行处理=="></a>==7. 导航守卫放行过用户 token 也可能会失效,需要在 main.js 中通过响应拦截器对失效的 token 进行处理==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(function(response)&#123;</span><br><span class="line">    &#x2F;&#x2F;对响应数据做点什么,也可以统一的进行相应的判断</span><br><span class="line">    const &#123;statusCode,message&#125; &#x3D; response.data</span><br><span class="line">    if(statusCode &#x3D;&#x3D;&#x3D; 401 &amp;&amp; message &#x3D;&#x3D;&#x3D;&#39;用户信息验证失败&#39;)&#123;</span><br><span class="line">    &#x2F;&#x2F;token过期了将无效token移出</span><br><span class="line">        localStorage.removeItem(&#39;token&#39;)</span><br><span class="line">        localStorage.removeItem(&#39;user_id&#39;)</span><br><span class="line">        Toast(&#39;尊敬的用户,您的登录状态已过期,请重新登录&#39;)</span><br><span class="line">        &#x2F;&#x2F;跳转登录页</span><br><span class="line">        router.push(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return response</span><br><span class="line">    &#125;,</span><br><span class="line">    function(error)&#123;</span><br><span class="line">        return Promise.reject(error)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8-退出功能"><a href="#8-退出功能" class="headerlink" title="8. 退出功能"></a>8. 退出功能</h3><h4 id="在-main-js-中引入-button-组件"><a href="#在-main-js-中引入-button-组件" class="headerlink" title="在 main.js 中引入 button 组件"></a>在 main.js 中引入 button 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;vant&#39;</span><br><span class="line">Vue.use(Button)</span><br></pre></td></tr></table></figure><h4 id="在-Profile-中使用-button-组件"><a href="#在-Profile-中使用-button-组件" class="headerlink" title="在 Profile 中使用 button 组件"></a>在 Profile 中使用 button 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;logout-btn&quot;&gt;</span><br><span class="line">    &lt;van-button size&#x3D;&quot;large&quot; round type&#x3D;&quot;info&gt; 退出 &lt;&#x2F;vant-button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F;修改样式</span><br><span class="line">.logout-btn &#123;</span><br><span class="line">    padding: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给退出按钮设置点击事件-点击时进行确认退出提示-确认后销毁登录状态-然后进行跳转"><a href="#给退出按钮设置点击事件-点击时进行确认退出提示-确认后销毁登录状态-然后进行跳转" class="headerlink" title="==给退出按钮设置点击事件,点击时进行确认退出提示,确认后销毁登录状态,然后进行跳转=="></a>==给退出按钮设置点击事件,点击时进行确认退出提示,确认后销毁登录状态,然后进行跳转==</h4><h4 id="给退出按钮设置点击事件"><a href="#给退出按钮设置点击事件" class="headerlink" title="给退出按钮设置点击事件"></a>给退出按钮设置点击事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button size&#x3D;&quot;large&quot; round type&#x3D;&quot;info&quot; @click&#x3D;&quot;logout&quot;&gt;</span><br><span class="line">退出</span><br><span class="line">&lt;&#x2F;van-button&gt;</span><br></pre></td></tr></table></figure><h4 id="点击后进行退出确认"><a href="#点击后进行退出确认" class="headerlink" title="点击后进行退出确认"></a>点击后进行退出确认</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">async logout()&#123;</span><br><span class="line">&#x2F;&#x2F;try是点击取消后需要抛出错误</span><br><span class="line">    try &#123;</span><br><span class="line">    &#x2F;&#x2F;由于confirm接收一个promise函数,所以可以用async和await进行优化</span><br><span class="line">    &#x2F;&#x2F;点击确认按钮进行提示</span><br><span class="line">        await this.$dialog.confirm(&#123;</span><br><span class="line">            title: &#39;温馨提示&#39;,</span><br><span class="line">            message: &#39;确认退出吗?&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F;清除登录状态</span><br><span class="line">        localStroage.removeItem(&#39;token&#39;)</span><br><span class="line">        localStroage.removeItem(&#39;user_id&#39;)</span><br><span class="line">        &#x2F;&#x2F;点击确认跳转login</span><br><span class="line">        this.$router.push(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125; catch(e)&#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-点击设置或者个人信息跳转编辑信息页面"><a href="#8-点击设置或者个人信息跳转编辑信息页面" class="headerlink" title="8. 点击设置或者个人信息跳转编辑信息页面"></a>8. 点击设置或者个人信息跳转编辑信息页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;user-info&quot; @click&#x3D;&quot;$router.push(&#39;&#x2F;edit-profile&#39;)&quot;&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;hm-nav name&#x3D;&quot;设置&quot; @click&#x3D;&quot;$router.push(&#39;&#x2F;edit-profile&#39;)&quot;&gt;&lt;&#x2F;hm-nav&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/categories/vue%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>3. 从零开始新闻头条(Register注册页)</title>
    <link href="http://guhaijian.github.io/2020/09/12/3.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Register%E6%B3%A8%E5%86%8C%E9%A1%B5)/"/>
    <id>http://guhaijian.github.io/2020/09/12/3.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Register%E6%B3%A8%E5%86%8C%E9%A1%B5)/</id>
    <published>2020-09-12T12:44:30.586Z</published>
    <updated>2020-09-12T12:44:16.626Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从零开始新闻头条-Register-注册页"><a href="#从零开始新闻头条-Register-注册页" class="headerlink" title="从零开始新闻头条(Register 注册页)"></a>从零开始新闻头条(Register 注册页)</h1><h3 id="1-Register-注册页基本结构和样式"><a href="#1-Register-注册页基本结构和样式" class="headerlink" title="1. Register 注册页基本结构和样式"></a>1. Register 注册页基本结构和样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;register&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;close&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconicon-test&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;logo&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconnew&quot;&gt; &lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;username&quot;&gt;</span><br><span class="line">      &lt;hm-input&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;nickname&quot;&gt;</span><br><span class="line">      &lt;hm-input&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;password&quot;&gt;</span><br><span class="line">      &lt;hm-input&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;register-btn&quot;&gt;</span><br><span class="line">      &lt;hm-button&gt;&lt;&#x2F;hm-button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入hm-input组件和hm-button组件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HmInput from &#39;components&#x2F;hm-input.vue&#39;</span><br><span class="line">import HmButton from &#39;components&#x2F;hm-button.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HmInput,</span><br><span class="line">    HmButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;样式</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.register &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  .close &#123;</span><br><span class="line">    i &#123;</span><br><span class="line">      font-size: 27px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .logo &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    i &#123;</span><br><span class="line">      font-size: 126px;</span><br><span class="line">      color: #d81e06;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="2-组件通信渲染数据"><a href="#2-组件通信渲染数据" class="headerlink" title="2. 组件通信渲染数据"></a>2. 组件通信渲染数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">父传子渲染placeholder、type、err-msg、rules,v-model双向绑定需要输入的内容</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;username&quot;&gt;</span><br><span class="line">  &lt;hm-input</span><br><span class="line">    :rules&#x3D;&quot;userRules&quot;</span><br><span class="line">    v-model&#x3D;&quot;username&quot;</span><br><span class="line">    placeholder&#x3D;&quot;账号&#x2F;手机号&quot;</span><br><span class="line">    err-msg&#x3D;&quot;账号必须是1开头, 5-11位的数字&quot;</span><br><span class="line">    type&#x3D;&quot;text&quot;</span><br><span class="line">  &gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;nickname&quot;&gt;</span><br><span class="line">  &lt;hm-input</span><br><span class="line">    :rules&#x3D;&quot;nickRules&quot;</span><br><span class="line">    v-model&#x3D;&quot;nickname&quot;</span><br><span class="line">    placeholder&#x3D;&quot;昵称&quot;</span><br><span class="line">    err-msg&#x3D;&quot;昵称必须是2-6位的中文字符&quot;</span><br><span class="line">    type&#x3D;&quot;text&quot;</span><br><span class="line">  &gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;password&quot;&gt;</span><br><span class="line">  &lt;hm-input</span><br><span class="line">    :rules&#x3D;&quot;passRules&quot;</span><br><span class="line">    v-model&#x3D;&quot;password&quot;</span><br><span class="line">    placeholder&#x3D;&quot;密码&quot;</span><br><span class="line">    err-msg&#x3D;&quot;密码必须是3-11位字符&quot;</span><br><span class="line">    type&#x3D;&quot;password&quot;</span><br><span class="line">  &gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;变量初始化</span><br><span class="line">data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">  username: &#39;&#39;,</span><br><span class="line">  nickname: &#39;&#39;,</span><br><span class="line">  password: &#39;&#39;,</span><br><span class="line">  userRules: &#x2F;^1\d&#123;4,10&#125;$&#x2F;,</span><br><span class="line">  nickRules: &#x2F;^[\u4e00-\u9fa5]&#123;2,6&#125;$&#x2F;,</span><br><span class="line">  passRules: &#x2F;^\w&#123;3,11&#125;$&#x2F;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-点击按钮发送注册请求"><a href="#3-点击按钮发送注册请求" class="headerlink" title="3.点击按钮发送注册请求"></a>3.点击按钮发送注册请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">async register() &#123;</span><br><span class="line">  if (!this.userRules.test(this.username)) &#123;</span><br><span class="line">    this.$toast(&#39;请输入正确的用户名&#39;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (!this.nickRules.test(this.nickname)) &#123;</span><br><span class="line">    this.$toast(&#39;请输入正确的昵称&#39;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (!this.passRules.test(this.password)) &#123;</span><br><span class="line">    this.$toast(&#39;请输入正确的密码&#39;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;发送ajax请求</span><br><span class="line">  const res &#x3D; await this.$axios.post(&#39;&#x2F;register&#39;, &#123;</span><br><span class="line">    username: this.username,</span><br><span class="line">    password: this.password,</span><br><span class="line">    nickname: this.nickname</span><br><span class="line">  &#125;)</span><br><span class="line">  const &#123; statusCode, message &#125; &#x3D; res.data</span><br><span class="line">  if (statusCode &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">    this.$toast.success(message)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.$toast.fail(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-路由传参知识点"><a href="#4-路由传参知识点" class="headerlink" title="==4. 路由传参知识点=="></a>==4. 路由传参知识点==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. 通过path跳转</span><br><span class="line">this.$router.push()&#123;</span><br><span class="line">    path:&#39;&#x2F;login&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. 通过name跳转</span><br><span class="line">this.$router.push()&#123;</span><br><span class="line">    name:&#39;&#x2F;login&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这种name的方式需要在router&#x2F;index.js文件中配置name,本质跟path跳转一样,少写一个&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#123; path: &#39;&#x2F;login&#39;, name: &#39;login&#39;, component: Login &#125;</span><br><span class="line"></span><br><span class="line">3. query和params传参区别:</span><br><span class="line">&#x2F;&#x2F;query传参会在地址栏拼接参数</span><br><span class="line">this.$router.push()&#123;</span><br><span class="line">    path:&#39;&#x2F;login&#39;,</span><br><span class="line">    query:&#123;</span><br><span class="line">        username:&#39;10086&#39;,</span><br><span class="line">        password:&#39;123&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;params传参是密文传参</span><br><span class="line">this.$router.push()&#123;</span><br><span class="line">    path:&#39;&#x2F;login&#39;,</span><br><span class="line">    params:&#123;</span><br><span class="line">        username:&#39;10086&#39;,</span><br><span class="line">        password:&#39;123&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-注册成功后跳转回-login-页并把-username-和-password-传递登录页中"><a href="#5-注册成功后跳转回-login-页并把-username-和-password-传递登录页中" class="headerlink" title="5.注册成功后跳转回 login 页并把 username 和 password 传递登录页中"></a>5.注册成功后跳转回 login 页并把 username 和 password 传递登录页中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1. Register页面中点击按钮发送请求跳转到Login页面时传递参数给Login页</span><br><span class="line">if (statusCode &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">this.$toast.success(message)</span><br><span class="line">&#x2F;&#x2F; 跳转到登录页,将username和password传递登录页</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  name: &#39;login&#39;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    username: this.username,</span><br><span class="line">    password: this.password</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.$toast.fail(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. 一进入Login页中就在created中去尝试获取username和password,如果有就填充到表单中,如果没有就正常渲染</span><br><span class="line"></span><br><span class="line">created() &#123;</span><br><span class="line">    const &#123; username, password &#125; &#x3D; this.$route.params</span><br><span class="line">    if (username &amp;&amp; password) &#123;</span><br><span class="line">        this.username &#x3D; username</span><br><span class="line">        this.password &#x3D; password</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/categories/vue%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2. 从零开始新闻头条(Login登录页)</title>
    <link href="http://guhaijian.github.io/2020/09/12/2.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Login%E7%99%BB%E5%BD%95%E9%A1%B5)/"/>
    <id>http://guhaijian.github.io/2020/09/12/2.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(Login%E7%99%BB%E5%BD%95%E9%A1%B5)/</id>
    <published>2020-09-12T12:44:30.583Z</published>
    <updated>2020-09-12T12:42:02.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从零开始新闻头条-Login-登录页"><a href="#从零开始新闻头条-Login-登录页" class="headerlink" title="从零开始新闻头条(Login 登录页)"></a>从零开始新闻头条(Login 登录页)</h1><h2 id="在-pages-文件夹下新建-login-登录页"><a href="#在-pages-文件夹下新建-login-登录页" class="headerlink" title="在 pages 文件夹下新建 login 登录页"></a>在 pages 文件夹下新建 login 登录页</h2><h4 id="1-login-登录页基本结构"><a href="#1-login-登录页基本结构" class="headerlink" title="1. login 登录页基本结构"></a>1. login 登录页基本结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;login&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;close&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconicon-test&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;logo&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont iconnew&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;username&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;password&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;password&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;login-btn&quot;&gt;</span><br><span class="line">      &lt;button&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-login-登录页基本样式"><a href="#2-login-登录页基本样式" class="headerlink" title="2. login 登录页基本样式"></a>2. login 登录页基本样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当标签添加scoped属性时,会给当前组件模板下所有元素加上一个自定义属性,使该标签下的css属性只作用于当前组件元素</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.login &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  .close &#123;</span><br><span class="line">    i &#123;</span><br><span class="line">      font-size: 27px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .logo &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    i &#123;</span><br><span class="line">      font-size: 126px;</span><br><span class="line">      color: #d81e06;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="3-封装-hm-input-输入框组件"><a href="#3-封装-hm-input-输入框组件" class="headerlink" title="3. 封装 hm-input 输入框组件"></a>3. 封装 hm-input 输入框组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. 在components中创建hm-input.vue组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-imput&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;tips&quot;&gt;提示&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">2. 给hm-input组件定义基本样式</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.hm-input &#123;</span><br><span class="line">  padding-bottom: 20px;</span><br><span class="line">  position: relative;</span><br><span class="line">  .inp &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    border-bottom: 2px solid #666;</span><br><span class="line">    background: transparent;</span><br><span class="line">    width: 100%;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    &amp;.success &#123;</span><br><span class="line">      border-color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;.error &#123;</span><br><span class="line">      border-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .tips &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="4-使用-hm-input-输入框组件"><a href="#4-使用-hm-input-输入框组件" class="headerlink" title="4. 使用 hm-input 输入框组件"></a>4. 使用 hm-input 输入框组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 在Login组件中局部注册HmInput组件</span><br><span class="line"></span><br><span class="line">import HmInput from &#39;components&#x2F;hm-input.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    HmInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">2. 在Login组件模板中插入hm-input组件</span><br><span class="line">&lt;div class&#x3D;&quot;username&quot;&gt;</span><br><span class="line">  &lt;hm-input&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;password&quot;&gt;</span><br><span class="line">  &lt;hm-input&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="5-input-框双向绑定传递参数"><a href="#5-input-框双向绑定传递参数" class="headerlink" title="5. input 框双向绑定传递参数"></a>5. input 框双向绑定传递参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">1. 父传子的方式传递placeholder和type属性</span><br><span class="line"></span><br><span class="line">父传子将父组件中的值传递给子组件</span><br><span class="line">&lt;hm-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入手机号&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;hm-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">子组件中通过props接收参数</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#39;&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      dafault: &#39;text&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">子组件模板中通过v-bind绑定参数</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-imput&quot;&gt;</span><br><span class="line">    &lt;input :type&#x3D;&quot;type&quot; :placeholder&#x3D;&quot;placeholder&quot; class&#x3D;&quot;inp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;tips&quot;&gt;提示&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">2. 子传父的方式在子组件输入框中输入内容,能修改父组件的username</span><br><span class="line"></span><br><span class="line">子组件中注册事件传递参数给父组件</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-imput&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F;动态解析value值</span><br><span class="line">    :value&#x3D;&quot;value&quot;</span><br><span class="line">  &#x2F;&#x2F;注册键盘输入事件</span><br><span class="line">    @input&#x3D;&quot;handleInput&quot;</span><br><span class="line">    class&#x3D;&quot;inp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;tips&quot;&gt;提示&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line"> prop:&#123;</span><br><span class="line"> &#x2F;&#x2F;由于input输入是双向绑定的,所以父传子也要接收value值</span><br><span class="line">    value:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        dafault:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> handleInput(e)&#123;</span><br><span class="line"> &#x2F;&#x2F;获取当前事件源的内容</span><br><span class="line">  const value &#x3D; e.target.value</span><br><span class="line"> &#x2F;&#x2F;子传父传输入的内容</span><br><span class="line">  this.$emit(&#39;input&#39;,value)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">父组件中接收参数的同时双向绑定传递参数</span><br><span class="line">&#x2F;&#x2F;v-model双向绑定会做两件事,一件是设置value值:value&#x3D;&quot;&quot;,另一件事是注册input事件,将得到的赋值传给绑定的变量 @input</span><br><span class="line">&lt;hm-input v-model&#x3D;&quot;username&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;hm-input v-model&#x3D;&quot;password&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line"></span><br><span class="line">3. 传递参数时进行格式校验</span><br><span class="line"></span><br><span class="line">父组件中定义参数规则</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    userRules: &#x2F;^1\d&#123;4,10&#125;$&#x2F;,</span><br><span class="line">    passRules: &#x2F;^\w&#123;3,11&#125;$&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">父组件中通过父传子的形式传递参数给子组件</span><br><span class="line">&lt;hm-input :rules &#x3D; &quot;userRules&quot; err-msg&#x3D;&quot;请输入正确的手机号, 格式:5-11位数字&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line">&lt;hm-input :rules &#x3D; &quot;passRules&quot; err-msg&#x3D;&quot;请输入正确的密码, 格式:3-11位字符&quot;&gt;&lt;&#x2F;hm-input&gt;</span><br><span class="line"></span><br><span class="line">子组件props中接收参数</span><br><span class="line">props:&#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">     type: RegExp</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; &#39;err-msg&#39;</span><br><span class="line">    errMsg: &#123;</span><br><span class="line">     type: String,</span><br><span class="line">     default: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">子组件模板中绑定变量</span><br><span class="line">&lt;span class&#x3D;&quot;tips&quot;&gt;&#123;&#123; errMsg &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">子组件的data中定义一个变量status,用来表示账号密码校验后的提示状态</span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        status:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在子组件handleInput事件中实时根据规则判断用户输入的正确与否,并把状态信息赋值给status</span><br><span class="line">handleInput(e) &#123;</span><br><span class="line">  const value &#x3D; e.target.value</span><br><span class="line">  this.$emit(&#39;input&#39;, value)</span><br><span class="line">  console.log(e.target.value)</span><br><span class="line">  &#x2F;&#x2F;如果没有配置规则,就不需要校验了</span><br><span class="line">  if (!this.rules) return</span><br><span class="line">  if (this.rules.test(value)) &#123;</span><br><span class="line">    this.status &#x3D; &#39;success&#39;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.status &#x3D; &#39;error&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">根据status的值,控制input框的类名(下划线)</span><br><span class="line">:class &#x3D; &quot;[status]&quot;</span><br><span class="line"></span><br><span class="line">控制提示信息的显示和隐藏</span><br><span class="line">&lt;span class&#x3D;&quot;tips&quot; v-show&#x3D;&quot;isShowTips&quot;&gt;&#123;&#123; errMsg &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">computed:&#123;</span><br><span class="line">    isShowTips()&#123;</span><br><span class="line">        return this.status &#x3D;&#x3D;&#x3D; &#39;error&#39; &amp;&amp; this.errMsg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-封装-hm-button-按钮组件"><a href="#6-封装-hm-button-按钮组件" class="headerlink" title="6. 封装 hm-button 按钮组件"></a>6. 封装 hm-button 按钮组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">创建hm-button基本结构样式</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hm-button&quot;</span><br><span class="line">  &#x2F;&#x2F;由于组件标签间的内容会被替换,可以通过slot插槽来保留标签间内容</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.hm-button &#123;</span><br><span class="line">  background-color: #c30;</span><br><span class="line">  height: 48px;</span><br><span class="line">  line-height: 48px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border-radius: 24px;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">在Login父组件中引入子组件</span><br><span class="line">&lt;div class&#x3D;&quot;login-btn&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;标签间文字用slot插槽替换</span><br><span class="line">  &lt;HmButton&gt;登录&lt;&#x2F;HmButton&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">import HmButton from &#39;components&#x2F;hm-button.vue&#39;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">    HmButton</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子传父,让子组件支持点击事件,父组件才能通过点击事件发送请求</span><br><span class="line">&lt;div class&#x3D;&quot;hm-button&quot; @click&#x3D;&quot;handleClick&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  handleClick(e)&#123;</span><br><span class="line">    this.$emit(&#39;click&#39;,e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">父组件注册点击事件</span><br><span class="line">&lt;div class&#x3D;&quot;login-btn&quot;&gt;</span><br><span class="line">  &lt;HmButton @click&#x3D;&quot;loginFn&quot;&gt;登录&lt;&#x2F;HmButton&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="7-安装-axios-并在-main-js-中进行优化"><a href="#7-安装-axios-并在-main-js-中进行优化" class="headerlink" title="==7. 安装 axios 并在 main.js 中进行优化=="></a>==7. 安装 axios 并在 main.js 中进行优化==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. yarn add axios 安装</span><br><span class="line">2. import axios from &#39;axios&#39; 导包</span><br><span class="line">&#x2F;&#x2F; axios优化1: 将axios挂载到vue原型上,将来实例中使用 &#x3D;&gt; this.$axios this.$toast</span><br><span class="line">Vue.prototype.$axios &#x3D; axios</span><br><span class="line">&#x2F;&#x2F; axios优化2: 配置基础地址, 只要配置了基础地址, 将来axios的请求都会自动拼上这个基准路径</span><br><span class="line">axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br></pre></td></tr></table></figure><h3 id="8-在-main-js-中按需引入-toast-弹出框组件"><a href="#8-在-main-js-中按需引入-toast-弹出框组件" class="headerlink" title="8. 在 main.js 中按需引入 toast 弹出框组件"></a>8. 在 main.js 中按需引入 toast 弹出框组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Toast &#125; from &#39;vant&#39;</span><br><span class="line">Vue.use(Toast)</span><br><span class="line">&#x2F;&#x2F;this.$toast()在组建中进行使用</span><br></pre></td></tr></table></figure><h3 id="9-点击按钮发送-ajax-请求"><a href="#9-点击按钮发送-ajax-请求" class="headerlink" title="9. 点击按钮发送 ajax 请求"></a>9. 点击按钮发送 ajax 请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">async loginFn(e) &#123;</span><br><span class="line">  &#x2F;&#x2F; 发送请求之前, 进行数据的校验</span><br><span class="line">  if (!this.userRules.test(this.username)) &#123;</span><br><span class="line">    this.$toast(&#39;请输入正确的用户名&#39;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (!this.passRules.test(this.password)) &#123;</span><br><span class="line">    this.$toast(&#39;请输入正确的密码&#39;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 发送 ajax 请求</span><br><span class="line">  const res &#x3D; await this.$axios.post(&#39;&#x2F;login&#39;, &#123;</span><br><span class="line">    username: this.username,</span><br><span class="line">    password: this.password</span><br><span class="line">  &#125;)</span><br><span class="line">  const &#123; statusCode, message, data &#125; &#x3D; res.data</span><br><span class="line">  if (statusCode &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">    &#x2F;&#x2F; 先存token, 再跳转</span><br><span class="line">    const &#123; token, user &#125; &#x3D; data</span><br><span class="line">    localStorage.setItem(&#39;token&#39;, token)</span><br><span class="line">    localStorage.setItem(&#39;user_id&#39;, user.id)</span><br><span class="line">    &#x2F;&#x2F;登录成功时的提示框</span><br><span class="line">    this.$toast.success(message)</span><br><span class="line">    &#x2F;&#x2F;点击进行跳转</span><br><span class="line">    &#x2F;&#x2F; this.$router.push(&#39;&#x2F;home&#39;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">   &#x2F;&#x2F;登录失败时的提示框</span><br><span class="line">    this.$toast.fail(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-按钮下方添加注册功能"><a href="#10-按钮下方添加注册功能" class="headerlink" title="10. 按钮下方添加注册功能"></a>10. 按钮下方添加注册功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构</span><br><span class="line">&lt;div class&#x3D;&quot;go-register&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;router-link相当于a链接跳转</span><br><span class="line">  没有账号? 立即 &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;样式</span><br><span class="line">.go-register &#123;</span><br><span class="line">    padding: 20px 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    a &#123;</span><br><span class="line">     color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/categories/vue%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>1. 从零开始新闻头条(项目初始化配置)</title>
    <link href="http://guhaijian.github.io/2020/09/12/1.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE)/"/>
    <id>http://guhaijian.github.io/2020/09/12/1.%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%96%B0%E9%97%BB%E5%A4%B4%E6%9D%A1(%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE)/</id>
    <published>2020-09-12T12:44:30.564Z</published>
    <updated>2020-09-12T12:41:36.311Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从零开始新闻头条-项目初始化"><a href="#从零开始新闻头条-项目初始化" class="headerlink" title="从零开始新闻头条(项目初始化)"></a>从零开始新闻头条(项目初始化)</h1><h3 id="1-用-vue-cli-脚手架初始化项目"><a href="#1-用-vue-cli-脚手架初始化项目" class="headerlink" title="1. 用 vue-cli 脚手架初始化项目"></a>1. 用 vue-cli 脚手架初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. vue create hm-news</span><br><span class="line">&#x2F;&#x2F;vue --version 查看vue-cli 脚手架版本信息</span><br><span class="line">&#x2F;&#x2F;yarn global add @vue&#x2F;cli 全局更新vue-cli脚手架</span><br><span class="line">&#x2F;&#x2F;选择配置信息hm-news([Vue 2]node-sass,bable,router,eslint)</span><br><span class="line">2. 创建配置文件vue.config.js</span><br><span class="line">&#x2F;&#x2F;保存自动打开浏览器</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    devServe:&#123;</span><br><span class="line">        open: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置-eslint-进行代码规范-可不用-直接用-prettier-插件"><a href="#2-配置-eslint-进行代码规范-可不用-直接用-prettier-插件" class="headerlink" title="2. 配置 eslint 进行代码规范(可不用,直接用 prettier 插件)"></a>2. 配置 eslint 进行代码规范(可不用,直接用 prettier 插件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. 在根目录创建.prettierrc配置文件</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;是否在行尾加分号</span><br><span class="line">    &quot;semi&quot;: false,</span><br><span class="line">    &#x2F;&#x2F;强制单引号</span><br><span class="line">    &quot;singleQuote&quot;: true,</span><br><span class="line">    &#x2F;&#x2F;尾随逗号</span><br><span class="line">    &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class="line">    &#x2F;&#x2F;只有一个参数的箭头函数的参数是否带圆括号（默认avoid不带）</span><br><span class="line">    &quot;arrowParens&quot;: &quot;avoid&quot;,</span><br><span class="line">    &#x2F;&#x2F;花括号前后空格</span><br><span class="line">    &quot;bracketSpacing&quot;: true,</span><br><span class="line">    &#x2F;&#x2F;使用tab（制表符）缩进而非空格</span><br><span class="line">    &quot;useTabs&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">2. 由于插件prettier和eslint冲突.需要在package.json中修改一下eslint规则</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">  &quot;semi&quot;: [&quot;error&quot;, &quot;never&quot;],</span><br><span class="line">  &quot;space-before-function-paren&quot;: [&quot;error&quot;, &quot;never&quot;]</span><br><span class="line">&#125;</span><br><span class="line">2. 选择配置是否关闭错误提示</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: true,</span><br><span class="line">    &#x2F;&#x2F; 关闭错误遮罩</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 关闭 eslint 保存校验</span><br><span class="line">  lintOnSave: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在-main-js-引入公共样式和在线图标库"><a href="#3-在-main-js-引入公共样式和在线图标库" class="headerlink" title="3. 在 main.js 引入公共样式和在线图标库"></a>3. 在 main.js 引入公共样式和在线图标库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在src文件夹下新建styles文件夹并创建公共样式和在线图标库的css文件</span><br><span class="line">2. 在src文件夹下的main.js中全局引入公共样式和字体图标库</span><br><span class="line">&#x2F;&#x2F; 导入公共的默认样式</span><br><span class="line">import &#39;.&#x2F;styles&#x2F;base.css&#39;</span><br><span class="line">&#x2F;&#x2F; 导入字体图标的样式</span><br><span class="line">import &#39;.&#x2F;styles&#x2F;iconfont.css&#39;</span><br></pre></td></tr></table></figure><h3 id="4-安装插件实现-rem-布局"><a href="#4-安装插件实现-rem-布局" class="headerlink" title="==4. 安装插件实现 rem 布局=="></a>==4. 安装插件实现 rem 布局==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. yarn add lib-flexible postcss-px2rem 安装插件</span><br><span class="line">2. 在public中的index.html中删除meta标签(viewport),因为插件会自动添加&lt;meta name&#x3D;&#39;viewport&#39;&gt;标签</span><br><span class="line">3. 在src&#x2F;main.js中导入插件包</span><br><span class="line">import &#39;lib-flexible&#39;</span><br><span class="line">4. 在vue.config.js中配置rem插件</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; rem 的配置</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;&#125;,</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          require(&#39;postcss-px2rem&#39;)(&#123;</span><br><span class="line">            &#x2F;&#x2F; 适配 360 屏幕, 设计图720中量出来的尺寸要 &#x2F; 2</span><br><span class="line">            &#x2F;&#x2F; 适配 375 屏幕, 设计图750中量出来的尺寸要 &#x2F; 2</span><br><span class="line">            remUnit: 36</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-在-vue-config-js-中进行目录别名配置"><a href="#5-在-vue-config-js-中进行目录别名配置" class="headerlink" title="5. 在 vue.config.js 中进行目录别名配置"></a>5. 在 vue.config.js 中进行目录别名配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 引入path模块</span><br><span class="line">const path &#x3D; require(&#39;path&#39;)&#x2F;&#x2F; 引入path模块</span><br><span class="line">function resolve (dir) &#123;</span><br><span class="line">  return path.join(__dirname, dir)&#x2F;&#x2F; path.join(__dirname)设置绝对路径</span><br><span class="line">&#125;</span><br><span class="line">2. 在module.exports进行别名配置</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">  chainWebpack: (config) &#x3D;&gt; &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(&#39;@&#39;, resolve(&#39;.&#x2F;src&#39;))</span><br><span class="line">      .set(&#39;components&#39;, resolve(&#39;.&#x2F;src&#x2F;components&#39;))</span><br><span class="line">      .set(&#39;pages&#39;, resolve(&#39;.&#x2F;src&#x2F;pages&#39;))</span><br><span class="line">      .set(&#39;assets&#39;, resolve(&#39;.&#x2F;src&#x2F;assets&#39;))</span><br><span class="line">    &#x2F;&#x2F; set第一个参数：设置的别名，第二个参数：设置的路径</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-使用码云仓库-gitee-管理项目"><a href="#6-使用码云仓库-gitee-管理项目" class="headerlink" title="6. 使用码云仓库 gitee 管理项目"></a>6. 使用码云仓库 gitee 管理项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 将本地项目推送到暂存区</span><br><span class="line">&#x2F;&#x2F;由于已经初始化过项目了,所以不需要git init 来进行初始化</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;初始化项目&#39;</span><br><span class="line">2. 在gitee上新建远程仓库名hm-news</span><br><span class="line">&#x2F;&#x2F;由于已经初始化过项目了,所以不需要勾选模板文件</span><br><span class="line">3. 创建远程仓库别名为hm-news</span><br><span class="line">git remote add hm-news  git@gitee.com:guhaijian&#x2F;hm-news.git</span><br><span class="line">4. 推送到远程仓库</span><br><span class="line">git push -u hm-news master</span><br><span class="line">&#x2F;&#x2F;-u一下之后就可以直接git push了</span><br></pre></td></tr></table></figure><h3 id="7-创建-login-登录组件并配置相关路由"><a href="#7-创建-login-登录组件并配置相关路由" class="headerlink" title="7. 创建 login 登录组件并配置相关路由"></a>7. 创建 login 登录组件并配置相关路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. 在src文件夹下新建pages文件夹,并在pages文件下新建Login.vue登录组件和Register.vue注册组件</span><br><span class="line"></span><br><span class="line">2. 修改初始化创建的App.vue,并添加路由出口</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">3. 在src文件夹下的router&#x2F;index.js路由文件下配置路由信息</span><br><span class="line"></span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line">import Login from &#39;pages&#x2F;Login.vue&#39;</span><br><span class="line">import Register from &#39;pages&#x2F;Register.vue&#39;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">&#x2F;&#x2F;通过路由切换显示</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;login&#39; &#125;,</span><br><span class="line">    &#123; path: &#39;&#x2F;login&#39;, component: Login &#125;,</span><br><span class="line">    &#123; path: &#39;&#x2F;register&#39;, component: Register &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="8-vant-ui-的按需加载使用"><a href="#8-vant-ui-的按需加载使用" class="headerlink" title="==8. vant-ui 的按需加载使用=="></a>==8. vant-ui 的按需加载使用==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. yarn add vant 进行安装</span><br><span class="line">2. yarn add babel-plugin-import -D 安装插件</span><br><span class="line">3. 在babel.config.js中配置</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [&#39;import&#39;, &#123;</span><br><span class="line">      libraryName: &#39;vant&#39;,</span><br><span class="line">      libraryDirectory: &#39;es&#39;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;, &#39;vant&#39;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/categories/vue%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue项目" scheme="http://guhaijian.github.io/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>事件绑定和事件委托</title>
    <link href="http://guhaijian.github.io/2020/07/26/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>http://guhaijian.github.io/2020/07/26/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</id>
    <published>2020-07-26T08:15:57.087Z</published>
    <updated>2020-07-26T08:23:49.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="js事件绑定和事件委托"><a href="#js事件绑定和事件委托" class="headerlink" title="js事件绑定和事件委托"></a>js事件绑定和事件委托</h1><h2 id="js中三种事件绑定"><a href="#js中三种事件绑定" class="headerlink" title="js中三种事件绑定"></a>js中三种事件绑定</h2><h3 id="1-在dom元素中直接绑定"><a href="#1-在dom元素中直接绑定" class="headerlink" title="1.在dom元素中直接绑定"></a>1.在dom元素中直接绑定</h3><blockquote><p>在DOM元素中如果绑定两个事件，只会执行第一个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; onclick&#x3D;&quot;hello()&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-通过js代码绑定"><a href="#2-通过js代码绑定" class="headerlink" title="2.通过js代码绑定"></a>2.通过js代码绑定</h3><blockquote><p>通过匿名函数方式绑定的事件只会执行最后绑定的那个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&quot;btn&quot;).onclick &#x3D; function()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-绑定事件监听函数"><a href="#3-绑定事件监听函数" class="headerlink" title="3.绑定事件监听函数"></a>3.绑定事件监听函数</h3><blockquote><p>事件监听：为同一个对象的同一个事件绑定多个事件处理程序</p></blockquote><ul><li>W3C规范：addEventListener（）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--element.addEventListener(event, function, useCapture)--&gt;</span><br><span class="line">&lt;!--event:（必需）事件名，支持所有 DOM事件 --&gt;</span><br><span class="line">&lt;!--function：（必需）指定要事件触发时执行的函数--&gt;</span><br><span class="line">&lt;!--useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。--&gt;</span><br><span class="line">&lt;!--removeEventListener（event, function）：移除事件监听--&gt;</span><br><span class="line">&lt;!--注：IE8以下不支持--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;,hello);</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>IE8之前的方法：attachEvent（）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--element.attachEvent(event, function)--&gt;</span><br><span class="line">&lt;!--event：（必需）事件类型。需加“on“，例如：onclick。--&gt;</span><br><span class="line">&lt;!--function：（必需）指定要事件触发时执行的函数。--&gt;</span><br><span class="line">&lt;!--detachEvent：取消事件监听--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;click me&quot; id&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;btn&quot;).attachEvent(&quot;onclick&quot;,hello);</span><br><span class="line">    function hello()&#123;</span><br><span class="line">    alert(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><blockquote><ol><li>事件委托就是利用冒泡的原理，将事件添加到父元素或者祖先元素身上，去触发执行效果。</li><li>事件绑定无法对动态创建的元素添加事件，事件委托可以给动态创建的元素添加事件。</li><li>每一次访问dom元素都会引起浏览器重绘和重排，次数多了就会影响性能，所以在处理大量的事件时，事件委托比事件绑定效率高</li><li>每一个绑定事件的元素都要绑定一个函数，每个函数都是一个对象，对象会占用很多内存，内存中的对象越多，性能就越差。事件委托只给父元素或者祖先元素添加事件，所以总体上比较节约内存</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://guhaijian.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用async和axios发送请求</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E5%88%A9%E7%94%A8async%E5%92%8Cawite%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E5%88%A9%E7%94%A8async%E5%92%8Cawite%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</id>
    <published>2020-07-26T08:15:57.076Z</published>
    <updated>2020-09-12T12:41:32.273Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用-async-和-awite-发送-axios-请求"><a href="#利用-async-和-awite-发送-axios-请求" class="headerlink" title="利用 async 和 awite 发送 axios 请求"></a>利用 async 和 awite 发送 axios 请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function axios(obj) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            const xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">            xhr.open(obj.method, obj.url)</span><br><span class="line">            xhr.send(null)</span><br><span class="line">            xhr.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">                if (xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">                    if (xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    resolve(JSON.parse(xhr.responseText))</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        reject(xhr.responseText)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    async function fn() &#123;</span><br><span class="line">        const res &#x3D; await axios(&#123;</span><br><span class="line">            method: &#39;get&#39;,</span><br><span class="line">            url: &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;todos&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">            console.log(res)</span><br><span class="line">        const res2 &#x3D; await axios(&#123;</span><br><span class="line">            method: &#39;get&#39;,</span><br><span class="line">            url: &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;todos&#x2F;1&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">            console.log(res2)</span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>事件循环队列</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-07-26T08:15:57.072Z</published>
    <updated>2020-07-26T08:25:22.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="事件循环队列"><a href="#事件循环队列" class="headerlink" title="事件循环队列"></a>事件循环队列</h1><h3 id="线程概念："><a href="#线程概念：" class="headerlink" title="线程概念："></a>线程概念：</h3><ul><li>==浏览器是多线程的==，其包含的线程有GUI渲染线程（负责渲染页面，解析HTML、CSS构成DOM树、JS引擎、事件触发线程、定时器触发线程、HTTP请求线程等主要线程）</li><li>==JS引擎是单线程的==，可以把这个线程称之为==JS主线程==</li><li>我们把JS中处理异步文件读取、AJAX请求等==异步事件==执行的线程称之为==幕后线程==或者工作线程，一般认为该线程在浏览器的JS引擎中，但与主线程分开</li></ul><h3 id="任务队列："><a href="#任务队列：" class="headerlink" title="任务队列："></a>任务队列：</h3><ul><li>==同步任务==：是==主线程==上排队执行的任务，只有前一个任务执行完毕才会去执行后一个任务</li><li>==异步任务==：是进入到==任务队列==中的任务，==只有任务队列通知主线程某个异步任务可以执行了，该任务才会进入主线程==</li></ul><h3 id="任务队列中的宏任务和微任务："><a href="#任务队列中的宏任务和微任务：" class="headerlink" title="任务队列中的宏任务和微任务："></a>任务队列中的宏任务和微任务：</h3><ul><li>==宏任务==：==script== ( 整体代码 )、==setTimeout==、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</li><li>==微任务==：==Promise==、MutaionObserver（H5新特性，当DOM树发生变动时，会等所有DOM操作完后一次性触发，这是一个异步任务）、process.nextTick ( Node.js 环境 )</li></ul><h3 id="流程图解"><a href="#流程图解" class="headerlink" title="流程图解"></a>流程图解</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/images/%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.jpg" alt=""></p><h3 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">console.log(0)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 - 宏任务2--&gt;</span><br><span class="line">        console.log(1)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">    &lt;!--将外层的promise对象的状态, 改成fulfilled成功, 将来.then可以执行 p1--&gt;</span><br><span class="line">    resolve(&#39;p1&#39;)</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 --- 宏任务3--&gt;</span><br><span class="line">        &lt;!--promise的状态只能被修改一次, 一旦被修改, 就会状态凝固--&gt;</span><br><span class="line">            resolve(&#39;setTimeout2&#39;)</span><br><span class="line">            console.log(4)</span><br><span class="line">         &#125;, 0)</span><br><span class="line">    &lt;!--将内层的promise对象的状态, 改成fulfilled成功, 将来.then p2--&gt;</span><br><span class="line">    resolve(&#39;p2&#39;)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">    &lt;!--排队 --- 微任务1--&gt;</span><br><span class="line">        console.log(data) </span><br><span class="line">    &#125;)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &lt;!--等待执行 ---- 宏任务4--&gt;</span><br><span class="line">          resolve(&#39;setTimeout1&#39;)</span><br><span class="line">          console.log(5)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">    &lt;!--微任务2--&gt;</span><br><span class="line">        console.log(data)  </span><br><span class="line">    &#125;)</span><br><span class="line">        console.log(6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE生命周期</title>
    <link href="http://guhaijian.github.io/2020/07/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://guhaijian.github.io/2020/07/26/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-07-26T08:15:57.068Z</published>
    <updated>2020-07-26T08:23:29.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="VUE生命周期"><a href="#VUE生命周期" class="headerlink" title="VUE生命周期"></a>VUE生命周期</h1><h1 id="生命周期图解"><a href="#生命周期图解" class="headerlink" title="生命周期图解"></a>生命周期图解</h1><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/images/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E8%A7%A3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>双向数据绑定</title>
    <link href="http://guhaijian.github.io/2020/07/26/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://guhaijian.github.io/2020/07/26/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2020-07-26T08:15:57.066Z</published>
    <updated>2020-07-26T08:26:16.769Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="VUE双向数据绑定"><a href="#VUE双向数据绑定" class="headerlink" title="VUE双向数据绑定"></a>VUE双向数据绑定</h1><blockquote><p>所谓双向数据绑定就是视图元素变化会引发view=&gt;model中对应的数据改变，反过来model=&gt;view中数据发生变化也会引起视图更新</p></blockquote><h3 id="1-从view到model"><a href="#1-从view到model" class="headerlink" title="1. 从view到model:"></a>1. 从view到model:</h3><ul><li>采用dom事件绑定实现</li></ul><h3 id="2-从model到view"><a href="#2-从model到view" class="headerlink" title="2. 从model到view:"></a>2. 从model到view:</h3><ul><li>angular脏数据检查：通过脏值检测（定时器轮询）的方式比对数据是否有变更来决定是否更新视图，能兼容ie8但性能比较低</li><li>vue2.0中运用到了ES5中Object.defineProperty（obj, prop, descriptor）数据劫持的方式</li><li>vue3.0中运用到了ES6中Proxy（target, handler）数据代理的方式</li></ul><h4 id="1-Object-defineProperty（obj-prop-descriptor）数据劫持"><a href="#1-Object-defineProperty（obj-prop-descriptor）数据劫持" class="headerlink" title="1. Object.defineProperty（obj, prop, descriptor）数据劫持"></a>1. Object.defineProperty（obj, prop, descriptor）数据劫持</h4><blockquote><ol><li>obj: 要定义属性的对象</li><li>prop: 要定义或修改的属性的名称或 Symbol </li><li>descriptor: 要定义或修改的属性描述符</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type &#x3D; &#39;text&#39;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--view &#x3D;&gt; model--&gt;</span><br><span class="line">    </span><br><span class="line">    const input &#x3D; document.querySelector（&#39;input&#39;）</span><br><span class="line">    input.addEventListener（&#39;input&#39;，function（）&#123;</span><br><span class="line">        data.msg &#x3D; this.value</span><br><span class="line">    &#125;）</span><br><span class="line">    const data &#x3D; &#123;</span><br><span class="line">        msg: &#39;hello&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--model &#x3D;&gt; view--&gt;</span><br><span class="line">    </span><br><span class="line">    let temp &#x3D; data.msg</span><br><span class="line">    input.value &#x3D; msg</span><br><span class="line">    &lt;!--data--数据对象；&#39;msg&#39;--劫持的属性名--&gt;</span><br><span class="line">    &lt;!--get（）：读取劫持属性时触发，get中要有返回值--&gt;</span><br><span class="line">    &lt;!--set（）：设置劫持的属性值时触发--&gt;</span><br><span class="line">    Object.defineProperty（data, &#39;msg&#39;, &#123;</span><br><span class="line">        get（）&#123;</span><br><span class="line">            return msg</span><br><span class="line">        &#125;，</span><br><span class="line">        set（value）&#123;</span><br><span class="line">            msg &#x3D; value</span><br><span class="line">            input.value &#x3D; value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h6 id="Object-defineProperty（）数据劫持的缺点："><a href="#Object-defineProperty（）数据劫持的缺点：" class="headerlink" title="Object.defineProperty（）数据劫持的缺点："></a>Object.defineProperty（）数据劫持的缺点：</h6><ul><li>无法监控数组下标的变化，需要通过push（）、shift（）等方法来实现数组变动</li><li>只能劫持对象的属性，需要对每个对象的每个属性进行遍历来实现对数据的监控</li><li>并且需要通过递归和遍历data对象来实现深度遍历，如果属性值也是对象也需要深度遍历</li></ul><h4 id="Proxy（target-handler）数据代理"><a href="#Proxy（target-handler）数据代理" class="headerlink" title="Proxy（target, handler）数据代理"></a>Proxy（target, handler）数据代理</h4><blockquote><ol><li>target: 需要使用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li>handler:  一个对象，其属性是当执行一个操作时定义代理的行为的函数（可以理解为某种触发器） </li><li>可以监听（劫持）多个属性，而且可以监听（劫持）到新添加的属性</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&#39;text&#39;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--view &#x3D;&gt; model--&gt;</span><br><span class="line">    </span><br><span class="line">    const input &#x3D; document.querySelector（&#39;input&#39;）</span><br><span class="line">    input.addEventListener（&#39;input&#39;, function（）&#123;</span><br><span class="line">        obj.msg &#x3D; this.value</span><br><span class="line">    &#125;)</span><br><span class="line">    const data &#x3D; &#123;</span><br><span class="line">        msg: &#39;hello&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--model &#x3D;&gt; view--&gt;</span><br><span class="line">    </span><br><span class="line">    input.value &#x3D; data.msg</span><br><span class="line">    const obj &#x3D; new proxy（data, &#123;</span><br><span class="line">        get（target, key）&#123;</span><br><span class="line">            return target[key]</span><br><span class="line">        &#125;，</span><br><span class="line">        set（target, key, value）&#123;</span><br><span class="line">            target[key] &#x3D; value</span><br><span class="line">            input.value &#x3D; value</span><br><span class="line">        &#125;，</span><br><span class="line">    &#125;）</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>MVC、MVP、MVVM架构模式</title>
    <link href="http://guhaijian.github.io/2020/07/23/MVC%E3%80%81MVP%E3%80%81MVVM%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://guhaijian.github.io/2020/07/23/MVC%E3%80%81MVP%E3%80%81MVVM%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-23T03:41:23.660Z</published>
    <updated>2020-07-29T01:08:55.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MVC、MVP、MVVM架构模式"><a href="#MVC、MVP、MVVM架构模式" class="headerlink" title="MVC、MVP、MVVM架构模式"></a>MVC、MVP、MVVM架构模式</h1><blockquote><p>发展历程：MVC =&gt; MVP =&gt; MVVM</p></blockquote><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><ul><li>View: 用户界面<ul><li>提供界面工用户交互</li><li>展示模型数据</li></ul></li><li>Controller: 控制器<ul><li>接收请求</li><li>委托模型处理</li><li>选择对应视图</li><li>转发模型返回的数据</li></ul></li><li>Model: 业务模型<ul><li>保存数据</li><li>修改数据</li><li>查询数据</li></ul></li></ul><blockquote><p>主要逻辑：View触发事件，Controller响应并处理逻辑，调用Model，Model处理完成后将数据发送给View,View更新</p></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVC%E6%A8%A1%E5%BC%8F.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVC%E5%9B%BE%E8%A7%A3.jpg" alt=""></p><h3 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h3><blockquote><ol><li>MVP模式中将Controller改名为presenter,同时改变通信方向</li><li>MVP模式中View和Model不发生联系，以Presenter为核心，负责从Model获取数据，并填充到View中，因此View被也被称为“被动视图”，暴露出setter接口</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVP%E6%A8%A1%E5%BC%8F.jpg" alt=""></p><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><blockquote><ol><li>传统的前端会将数据手动渲染到页面上,MVVM模式不需要用户手动操作dom元素，会将数据绑定到viewModel层上，会自动将数据渲染到页面中，视图变化会通知viewModel层更新数据。ViewModel就是我们MVVM模式中的桥梁</li><li>该模型中，View与VM保持同步，View绑定到VM的属性上，如果VM数据发生变化，通过数据绑定的方式，View会自动更新视图；VM同样也暴露出Model中的数据</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVVM%E6%A8%A1%E5%BC%8F.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/guhaijian/Image/MVVM/MVVM%E5%9B%BE%E8%A7%A3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="前端技术" scheme="http://guhaijian.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://guhaijian.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
